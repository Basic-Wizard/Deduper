Define the problem:
During PCR, some DNA fragments may wind up being sequenced more than once if there aren't many 
unique DNA template molecules in the initial library or if the library preparation 
process reduces the number of distinct DNA fragments. When a fragment is sequenced more than once, it creates a duplicate which holds redundant
information. This creates a problem because duplicates can cause over-representation of a sequence. 

Define the solution:
To solve this problem, we will perform deduplication on our SAM file after alignment. We want to dedupe after aligning to a reference genome because
reads with identical sequences that match to the same genomic locations on the reference sequence represent duplicates. We know we have a duplicate when reads
share the same chromosome, same starting position, same UMI (unique molecular identifier), and have the same strandness. The shared characteristics correspond to 
RName for chromosome, QName for UMI infomation, Bitwise Flag for strandedness, POS for starting position, and Cigar for determining soft clipping. 

Pseudocode:

1. We first want to open and read our files (SAM file and known UMI file) 
  a. open separately 
  b. use a with open loop
  c. use argsparse as well
*insert example of what each file looks like*

2. Create empty dictionaries for each shared characteristic from SAM file:
  a. RName
  b. QName
  c. Bitwise Flag
  d. POS
  e. Cigar
*insert example of what dictionary will look like*

3. Create an empty dictionary for stored natches (or send to final output file)

4. Create a dictionary for known UMI's (96 total known)
  a. create a loop to iterate through the STL96 file and store them in the known UMI dictionary
  b. use the UMI dictionary to check for matches in the QName dictionary (comes from the SAM file) 
    i. create a UMI match dict to store these matches. 
    ii. discard any non-matches as they represent errors.
   *insert example of what a match and mismatch would look like*
   
5. Use Samtools to sort our SAM file (what should I sort by? chromosome?)

6. Check for soft clipping (sequence error, splicing, etc)
  a. I think this will require a for loop to determine if there is a S (soft clipping) and M (alignment match) present in our Cigar string and where
  out reference position actually begins
  *insert example of what soft clipping may look like*
  
7. Create an if loop to determine if a read shares the same RName, POS, and Bitwise Flag with another read
  a. if chrom, pos, and strand are exact, discard read
  b. if chrom, pos, and strand are not exact, store in dictionary for matches
  *insert example of what a kept read and discarded read looks like*
  
8. Close files 

High Level Functions:




*Paper I read to understand deduplication: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-017-1471-9
